GO
CREATE or ALTER PROCEDURE dbo.spCrudProducto
	@idProducto int,
	@nombreProducto varchar(30) ,
	@descripcionProducto varchar(40) ,
	@idCategoria int ,
	@nombreImg varchar(250),
	@imgPath varchar(2000),
	@cantMin int, 
	@cantMax int,
	@operationFlag int	-- Insert 0, update 1, select 2, select-ALL 3, delete 4
	with encryption
as
begin
declare @errorInt int = 0, @errorMsg varchar(60)
declare @identityValue int = -1
	if @operationFlag = 0 BEGIN

		if @nombreProducto is not null and @descripcionProducto is not null and @descripcionProducto is not null and @idCategoria is not null
		and @nombreImg is not null and @imgPath is not null BEGIN
			IF (select count(*) from MYSQLSERVER...Producto where idProducto = @idProducto) = 0 BEGIN
				IF (select count(*) from MYSQLSERVER...CategoriaProducto where idCategoria = @idCategoria) = 1 BEGIN
					
						BEGIN TRY
								
								INSERT INTO MYSQLSERVER...Producto (nombreProducto,descripcionProducto,idCategoria,nombreImg ,imgPath)
								values (@nombreProducto,@descripcionProducto,@idCategoria,@nombreImg, @imgPath);

								
								set @idProducto = (SELECT TOP 1 idProducto FROM MYSQLSERVER...Producto ORDER BY idProducto DESC)

								set @errorMsg = 'Se ha insertado correctamente'
								EXEC spCrudLimite null, @cantMax, @cantMin, @idProducto, 0 
						END TRY
						BEGIN CATCH
							set @errorInt=1
							set @errorMsg = 'Error al agregar a la base de datos'
						END CATCH									
						
				END ELSE BEGIN 				
					set @errorInt =1
					set @errorMsg = 'No existe una categoria válida'
					END				
			END ELSE BEGIN 			
				set @errorInt=1
				set @errorMsg = 'Ya existe un producto con este ID'
				END
		END ELSE BEGIN 			
			set @errorInt=1
			set @errorMsg = 'Hay algún valor nulo'
			END  ---Final if validaci�n nulos

		if @identityValue != -1
			return @identityValue

	END
	
	if @operationFlag = 1 BEGIN
		if  @idProducto is not null and @nombreProducto is not null and @descripcionProducto is not null and @descripcionProducto is not null and @idCategoria is not null
		and @nombreImg is not null and @imgPath is not null BEGIN
			IF (select count(*) from MYSQLSERVER...Producto where idProducto = @idProducto) = 1 BEGIN
				IF (select count(*) from MYSQLSERVER...CategoriaProducto where idCategoria = @idCategoria) = 1 BEGIN
							BEGIN TRY
								update MYSQLSERVER...Producto 
								set nombreProducto = ISNULL(@nombreProducto, nombreProducto), descripcionProducto = ISNULL(@descripcionProducto, descripcionProducto),
								idCategoria = ISNULL(@idCategoria, idCategoria), nombreImg = ISNULL(@nombreImg, nombreImg), imgPath = ISNULL(@imgPath, imgPath)

								where idProducto = @idProducto
								declare @idLimite int

								set @idLimite = (select idLimite from MYSQLSERVER...Limite  where idProducto = 1)  
								EXEC spCrudLimite @idLimite, @cantMax, @cantMin, @idProducto, 1 
								set @errorMsg = 'The product has update'
								set @errorInt = 2
							END TRY
							BEGIN CATCH
								set @errorInt=1
								set @errorMsg = 'Error al actualizar a la base de datos'
							END CATCH
	
				END ELSE BEGIN 				
					set @errorInt =1
					set @errorMsg = 'No existe una categoria válido'
					END				
			END ELSE BEGIN 			
				set @errorInt=1
				set @errorMsg = 'NO existe un producto con este ID'
				END
		END ELSE BEGIN 			
			set @errorInt=1
			set @errorMsg = 'Hay algún valor nulo'
			END  ---Final if validaci�n nulos
	END

	if @operationFlag = 2	begin
		select * from MYSQLSERVER...Producto 
		where idProducto = @idProducto and estado =1;
		set @errorInt =-1;
	end

	IF @operationFlag = 3	BEGIN
		select * from MYSQLSERVER...Producto 	
		where estado =1;
		set @errorInt =-1;
	END

	IF @operationFlag = 4	BEGIN
		IF (select count(*) from MYSQLSERVER...Producto where idProducto = @idProducto ) = 1 BEGIN
			IF (select count(*) from MYSQLSERVER...Producto where idProducto = @idProducto and estado !=0) = 1 BEGIN
				update MYSQLSERVER...Producto 	 
				set estado = ISNULL(0, estado)
				where idProducto = @idProducto
				set @errorInt=0
				set @errorMsg = 'Producto Eliminado'
			END ELSE BEGIN 			
					set @errorInt=4
					set @errorMsg = 'El producto ya se ha eliminado'
					END
		END ELSE BEGIN 			
				set @errorInt=4
				set @errorMsg = 'NO existe un producto con este ID'
				END
	END

	IF @operationFlag = 5	BEGIN
		IF (select count(*) from MYSQLSERVER...Producto where idProducto = @idProducto ) = 1 BEGIN
			IF (select count(*) from MYSQLSERVER...Producto where idProducto = @idProducto and estado !=1) = 1 BEGIN
				update MYSQLSERVER...Producto 	 
				set estado = 1
				where idProducto = @idProducto
				set @errorInt=0
				set @errorMsg = 'Se ha reactivado'
			END ELSE BEGIN 			
				set @errorInt=4
				set @errorMsg = 'El producto ya está activado'
				END
		END ELSE BEGIN 			
				set @errorInt=4
				set @errorMsg = 'NO existe un producto con este ID'
				END
	END

	IF @operationFlag = 6	BEGIN
		IF (select count(*) from MYSQLSERVER...Producto where idProducto = @idProducto ) = 1 BEGIN
			IF( SELECT COUNT(*) from MYSQLSERVER...Producto as Producto
			INNER JOIN MYSQLSERVER...Lote as Lote ON Lote.idProducto = Producto.idProducto
			where Producto.idProducto = @idProducto ) =1 BEGIN
				IF( SELECT COUNT(*) from MYSQLSERVER...Producto as Producto
				INNER JOIN DetalleFactura ON DetalleFactura.idProducto = Producto.idProducto
				where Producto.idProducto = @idProducto 	) =1 BEGIN
					delete from MYSQLSERVER...Producto 	 
					where idProducto = @idProducto
					set @errorInt=0
					set @errorMsg = 'Se ha eliminado permanentemente'
				END ELSE BEGIN 			
					set @errorInt=1
					set @errorMsg = 'THE product is related '
					END
			END ELSE BEGIN 			
				set @errorInt=1
				set @errorMsg = 'THE product is related '
				END
			
		END ELSE BEGIN 			
				set @errorInt=1
				set @errorMsg = 'NO existe un producto con este ID'
				END
	END
	IF @errorInt =1
		select @errorInt as Error, @ErrorMsg as MensajeError
	IF @errorInt =0
		select 0 as Result, @ErrorMsg as MensajeError
	IF @errorInt =2
		select 0 as Result, @ErrorMsg as MensajeError
	IF @errorInt =4
		select 5 as Result, @ErrorMsg as MensajeError


end
GO 

CREATE or ALTER PROCEDURE dbo.spCrudLote
	@idLote int,
	@fechaProduccion date,
	@fechaExpiracion date,
	@idProducto int,
	@idProveedor int,
	@cantidadExistencias int ,
	@costoUnidad float,
	@porcentajeVenta float,
	@operationFlag int	-- Insert 0, update 1, select 2, select-ALL 3, delete 4
	with encryption
as
begin
declare @errorInt int = 0, @errorMsg varchar(60)
declare @identityValue int = -1
	if @operationFlag = 0 BEGIN

		if @fechaProduccion is not null and @fechaExpiracion is not null and @cantidadExistencias is not null and
		@costoUnidad is not null and @porcentajeVenta is not null BEGIN
			IF (select count(*) from MYSQLSERVER...Lote where idLote = @idLote) = 0 BEGIN
				IF (select count(*) from MYSQLSERVER...Producto where idProducto = @idProducto) = 1 BEGIN
					IF (select count(*) from MYSQLSERVER...Proveedor where idProveedor= @idProveedor) = 1 BEGIN
						BEGIN TRY

						INSERT INTO MYSQLSERVER...Lote (fechaProduccion, fechaExpiracion, idProducto, idProveedor, cantidadExistencias, costoUnidad, porcentajeVenta)
						values (@fechaProduccion, @fechaExpiracion, @idProducto, @idProveedor, @cantidadExistencias, @costoUnidad, @porcentajeVenta);
							set @errorInt=0
							set @errorMsg = 'The lote has inserted'
						END TRY
						BEGIN CATCH
							set @errorInt=-1
							set @errorMsg = 'Error al agregar a la base de datos'
						END CATCH	

					END ELSE BEGIN 				
					set @errorInt =-1
					set @errorMsg = 'No existe un proveedor v�lido'
					END	
						
				END ELSE BEGIN 				
					set @errorInt =-1
					set @errorMsg = 'No existe un producto v�lido'
					END				
			END ELSE BEGIN 			
				set @errorInt=-1
				set @errorMsg = 'Ya existe un lote con este ID'
				END
		END ELSE BEGIN 			
			set @errorInt=-1
			set @errorMsg = 'Hay alg�n valor nulo'
			END  ---Final if validaci?n nulos

		if @identityValue != -1
			return @identityValue

	END
	
	if @operationFlag = 1 BEGIN
		IF (select count(*) from MYSQLSERVER...Lote where idLote = @idLote) = 1 BEGIN
			IF (select count(*) from MYSQLSERVER...Producto where idproducto = @idproducto) = 1 BEGIN
				IF (select count(*) from MYSQLSERVER...Proveedor where idproveedor = @idproveedor) = 1 BEGIN
					BEGIN TRY

						update MYSQLSERVER...Lote
						set fechaProduccion = ISNULL(@fechaProduccion, fechaProduccion), fechaExpiracion = ISNULL(@fechaExpiracion, fechaExpiracion),
						idProducto = ISNULL(@idProducto, idProducto), idProveedor = ISNULL(@idProveedor, idProveedor),  cantidadExistencias = ISNULL(@cantidadExistencias, cantidadExistencias),
						costoUnidad = ISNULL(@costoUnidad, costoUnidad), porcentajeVenta = ISNULL(@porcentajeVenta, porcentajeVenta) where idLote = @idLote
						
						set @errorInt=1
						set @errorMsg = 'Data update'

					END TRY
					BEGIN CATCH
						set @errorInt=-1
						set @errorMsg = 'Error al actualizar a la base de datos'
					END CATCH
	
				END ELSE BEGIN 				
					set @errorInt =-1
					set @errorMsg = 'No existe un proveedor v�lido'
					END
			END ELSE BEGIN 				
				set @errorInt =-1
				set @errorMsg = 'No existe un producto v�lido'
				END	
			END ELSE BEGIN 			
				set @errorInt=-1
				set @errorMsg = 'NO existe un lote con este ID'
				END
	END

	if @operationFlag = 2
	begin
		select * from MYSQLSERVER...Lote 
		where idLote = @idLote and estado =1;
	end

	IF @operationFlag = 3
	BEGIN
		select * from MYSQLSERVER...Lote 	
		where estado = 1;
	END

	IF @operationFlag = 4
	BEGIN
		update MYSQLSERVER...Lote  
		set estado = ISNULL(0, estado)
		where idLote = @idLote
	END
	IF @operationFlag = 5
	BEGIN
		update MYSQLSERVER...Lote 	 
		set estado = ISNULL(1, estado)
		where idLote = @idLote
	END
	IF @operationFlag = 6	BEGIN
		IF (select count(*) from MYSQLSERVER...Lote as Lote where idLote = @idLote ) = 1 BEGIN
			IF( SELECT COUNT(*) from MYSQLSERVER...Lote as Lote
				INNER JOIN Inventario ON Inventario.idLote = Lote.idLote
				where Lote.idLote = @idProducto ) =1 BEGIN
					
							delete from MYSQLSERVER...Producto 	 
							where idProducto = @idProducto
							set @errorInt=6
								set @errorMsg = 'Se ha eliminado permanentemente'
					
			END ELSE BEGIN 			
				set @errorInt=1
				set @errorMsg = 'The lote is related '
				END			
		END ELSE BEGIN 			
			set @errorInt=1
			set @errorMsg = 'NO existe un lote con este ID'
			END
	END

	if @errorInt =-1
		select @errorInt as Error, @ErrorMsg as MensajeError
	if @errorInt =0
		select 0 as result, @ErrorMsg as result 
	if @errorInt =1
		select 0 as result, @ErrorMsg as result 
	if @errorInt =6
		select 0 as result, @ErrorMsg as result 
end



GO

GOCREATE or ALTER PROCEDURE dbo.spSelectProductsToView
	
as
begin
declare @errorInt int = 0, @errorMsg varchar(60)
declare @identityValue int = -1
	select Producto.idProducto, nombreProducto as Nombre, Producto.descripcionProducto as Descripcion, Categoria.nombreCategoria as Categoria, imgPath,
	Producto.estado, Limite.maxCant, Limite.minCant from MYSQLSERVER...Producto as Producto
	INNER JOIN MYSQLSERVER...CategoriaProducto as Categoria ON  Categoria.idCategoria = Producto.idCategoria
	INNER JOIN MYSQLSERVER...Limite as Limite ON Limite.idProducto = Producto.idProducto 
	
end
GO

CREATE or ALTER PROCEDURE dbo.spSelectLotetoView
	
as
begin
declare @errorInt int = 0, @errorMsg varchar(60)
declare @identityValue int = -1
	select idLote, CONVERT (VARCHAR(20), fechaProduccion,107) as fechaProduccion,CONVERT (VARCHAR(20), fechaExpiracion,107) as  fechaExpiracion, cantidadExistencias, costoUnidad, nombreProducto,
	nombreProveedor, CONCAT ( CONVERT(varchar(100),(porcentajeVenta*100)), ' %') as porcentajeVenta from MYSQLSERVER...Lote as Lote	
	INNER JOIN MYSQLSERVER...Producto as Producto ON  Producto.idProducto = Lote.idProducto
	INNER JOIN MYSQLSERVER...Proveedor as Proveedor ON  Proveedor.idProveedor = Lote.idProveedor
	
end
GO

CREATE or ALTER PROCEDURE dbo.spSelectInventoryView
	
as
begin
declare @errorInt int = 0, @errorMsg varchar(60)
declare @identityValue int = -1
	select nombreProducto, Sucursal.nombreSucursal, sum(cantidadInventario) as cantidadInventario,
	CONCAT ( '$ ',CONVERT(varchar(100),(precioVenta))) as precioVenta, Limite.maxCant, Limite.minCant  from Inventario
	INNER JOIN Sucursal as Sucursal ON  Sucursal.idSucursal = Inventario.idSucursal
	INNER JOIN MYSQLSERVER...Lote as Lote ON Inventario.idLote = Lote.idLote
	INNER JOIN MYSQLSERVER...Producto as Producto ON  Producto.idProducto = Lote.idProducto
	INNER JOIN MYSQLSERVER...Limite as Limite ON  Limite.idProducto = Producto.idProducto
	where Lote.estado = 1 and Producto.estado = 1	
	GROUP BY  nombreProducto,precioVenta, Limite.maxCant, Limite.minCant,Sucursal.nombreSucursal
end
GO


